<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LRC Interactive AI Hub</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9; /* Slate 100 */
        }
        #mapCanvas {
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #cbd5e1; /* Slate 300 */
            border-radius: 0.75rem; /* rounded-xl */
            background-color: #ffffff;
        }
        .btn-primary {
            transition: all 0.15s ease-in-out;
        }
        .btn-primary:hover {
            transform: translateY(-1px);
            /* Updated shadow color */
            box-shadow: 0 4px 6px -1px rgba(255, 82, 0, 0.5), 0 2px 4px -2px rgba(255, 82, 0, 0.5);
        }
        .tab-button, .sub-tab-button {
            transition: background-color 0.2s, color 0.2s;
            /* Allow text wrapping */
            white-space: normal;
            height: auto; /* Allow height to adjust */
        }
        .tab-pane, .sub-adventure-pane {
            animation: fadeIn 0.3s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
/* --- START GALAXY CSS --- */
        /* Base styles for the dark, space theme */
        .main-container-galaxy {
            /* Adjustments for integrating into the main page flow */
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* Tooltip Styling */
        #tooltip {
            position: fixed;
            background-color: #1f2937; /* Dark Gray background */
            color: #ffffff;
            border: 2px solid #e65100; /* Orange border */
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.7);
            z-index: 1000;
            max-width: 300px;
            font-size: 0.9rem;
            line-height: 1.4;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s, transform 0.2s;
        }
        #tooltip h4 {
            font-weight: 700;
            color: #ffc107;
            margin-bottom: 0.5rem;
        }
        
        /* Styles for the off-canvas cheat sheet panel (Starts off-screen) */
        #cheat-sheet-panel {
            transform: translateX(100%);
            transition: transform 0.5s ease-in-out;
            position: fixed;
            top: 0;
            right: 0;
            height: 100%;
            z-index: 50;
            background-color: #111827; /* Darker than body */
            border-left: 2px solid #e65100;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
            width: 90%; /* Default for mobile */
            overflow-y: auto;
        }
        
        /* Open state */
        #cheat-sheet-panel.open {
            transform: translateX(0);
        }

        @media (min-width: 768px) {
             #cheat-sheet-panel {
                width: 35%; /* Wider on desktop */
             }
        }


        /* Container for the solar system - Now uses viewport units for responsiveness */
        #galaxy-system {
            position: relative;
            /* Use 90% of the viewport's smaller dimension (min) to ensure it fits landscape/portrait */
            width: 90vmin; 
            height: 90vmin;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 5rem; /* Space below the galaxy */
        }
        
        /* Define base size in VW for responsive scaling */
        .vmax-unit {
            position: absolute; 
            width: 0; 
            height: 0; 
        }

        /* --- THE CORE (SUN) --- */
        .sun {
            width: 15vmin; 
            height: 15vmin; 
            border-radius: 50%;
            background: radial-gradient(circle, #ffc107 0%, #e65100 80%); 
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            box-shadow: 0 0 10vmin rgba(255, 193, 7, 0.7), inset 0 0 4vmin rgba(255, 255, 255, 0.5); 
            font-weight: 700;
            color: #111827;
            position: absolute;
            z-index: 10;
            padding: 0.5vmin;
            cursor: default;
            transition: transform 0.3s ease, filter 0.2s ease;
        }
        .sun:hover {
            filter: brightness(1.2);
        }

        /* --- PLANET STYLING AND POSITIONING (Static) --- */
        .planet {
            position: absolute;
            transform: translate(-50%, -50%); 
            cursor: pointer;
            transition: transform 0.3s ease, filter 0.2s ease;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 5px;
            font-weight: 600;
            box-shadow: 0 0.8vmin 2.5vmin rgba(0, 0, 0, 0.5); 
            border: 0.1vmin solid rgba(255, 255, 255, 0.2); 
            z-index: 15;
        }

        .planet-logo {
            width: 95%; 
            height: 95%; 
            border-radius: 50%; 
            position: relative;
            background-color: #d1d5db;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: inset 0 0 1vmin rgba(0, 0, 0, 0.3), inset 0 0 1vmin rgba(255, 255, 255, 0.2); 
            overflow: hidden;
            color: #111827;
        }

        .planet-logo img {
            width: 97%; 
            height: 97%; 
            object-fit: contain; 
            border-radius: 50%; 
            padding: 0.5vmin;
        }

        .planet-name {
            position: absolute;
            bottom: -3vmin;
            font-size: 1.5vmin;
            white-space: nowrap;
            color: #e5e7eb;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 0.4vmin 0.8vmin;
            border-radius: 4px;
        }

        .planet:hover {
            transform: translate(-50%, -50%) scale(1.1);
            filter: brightness(1.2);
            z-index: 20;
        }

        /* Planet Size and Logo Styles - Converted to VMIN */
        .size-lg { width: 20vmin; height: 20vmin; border-radius: 50%; } 
        .size-md { width: 16vmin; height: 16vmin; border-radius: 50%; } 
        .size-sm { width: 12vmin; height: 12vmin; border-radius: 50%; } 
        .size-xs { width: 8vmin; height: 8vmin; border-radius: 50%; } 

        /* Colors remain the same */
        .color-purple { background: linear-gradient(135deg, #7e22ce, #a855f7); }
        .color-red { background: linear-gradient(135deg, #dc2626, #f87171); }
        .color-green { background: linear-gradient(135deg, #059669, #34d399); }
        .color-orange { background: linear-gradient(135deg, #ea580c, #f97316); }
        .color-rainbow { background: linear-gradient(90deg, #ef4444, #f97316, #eab308, #22c55e, #3b82f6, #8b5cf6); }
        .color-blue { background: linear-gradient(135deg, #0284c7, #38bdf8); }
        .color-yellow { background: linear-gradient(135deg, #f59e0b, #facc15); }

        /* MOON STYLING AND POSITIONING (Relative to their planet) */
        .moon-path {
            position: absolute; 
            width: 1px;
            height: 1px;
            top: 50%;
            left: 50%;
        }

        .moon {
            position: absolute;
            transform: translate(-50%, -50%); 
            cursor: pointer;
            transition: transform 0.3s ease, filter 0.2s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            box-shadow: 0 0.5vmin 1.5vmin rgba(0, 0, 0, 0.4); 
            border: 0.1vmin solid rgba(255, 255, 255, 0.2);
            font-weight: 500;
        }

        .moon-logo {
            border-radius: 50%;
            box-shadow: inset 0 0 0.5vmin rgba(0, 0, 0, 0.3), inset 0 0 0.5vmin rgba(255, 255, 255, 0.2); 
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .moon-logo img {
            width: 95%; 
            height: 95%; 
            object-fit: contain; 
            border-radius: 50%;
        }

        .moon:hover {
            filter: brightness(1.2);
            transform: translate(-50%, -50%) scale(1.1);
        }

        .moon-name {
            position: absolute;
            bottom: -3vmin;
            font-size: 1.2vmin;
            white-space: nowrap;
            color: #e5e7eb;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 0.2vmin 0.5vmin;
            border-radius: 3px;
        }

        /* Utility to style the placeholder logos */
        .logo-placeholder {
            font-size: 2vmin;
            font-weight: 700;
            color: #111827;
            line-height: 1;
        }

        /* Matrix specific CSS */
        .matrix-table {
            border-collapse: collapse;
            border-radius: 8px;
            overflow: hidden;
            margin: 0 auto;
        }
        .matrix-table div.grid {
            border-spacing: 0;
            border-collapse: collapse;
        }
        .matrix-table div {
            padding: 0.75rem;
            word-break: break-word;
        }
        /* Matrix Logo Styling */
        .matrix-table img {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
            object-fit: contain;
            border-radius: 50%;
        }
/* --- END GALAXY CSS --- */
    </style>
</head>
<body class="p-4 sm:p-8 flex flex-col items-center min-h-screen">

    <div class="max-w-6xl w-full">
        

<!-- UPDATED SITE TITLE -->
<h1 class="text-4xl font-extrabold text-gray-900 mb-6 border-b-4 border-[#ff5200] pb-2">LRC Interactive AI Hub</h1>
        
        

<!-- NEW MAIN NAVIGATION -->
<nav id="main-tab-nav" class="flex flex-wrap gap-2 mb-8 p-1 bg-white rounded-xl shadow-inner">
            
    <button id="btn-main-adventure1" onclick="switchMainTab('adventure-1')" 
            class="tab-button flex-1 min-w-[120px] py-2 px-3 text-sm font-semibold rounded-lg text-black bg-[#ff5200] shadow-md">
        Legal Tech AI Galaxy
    </button>
    <button id="btn-main-adventuresparent" onclick="switchMainTab('adventures-parent')" 
            class="tab-button flex-1 min-w-[120px] py-2 px-3 text-sm font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">
        AI Adventures
    </button>
    <!-- NEW BUTTON FOR USAGE MATRIX -->
    <button id="btn-main-adventurematrix" onclick="switchMainTab('adventure-matrix')" 
            class="tab-button flex-1 min-w-[120px] py-2 px-3 text-sm font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">
        Usage Matrix: Tool Capabilities
    </button>
</nav>

        

<div id="tab-content" class="bg-white p-6 sm:p-8 rounded-xl shadow-2xl border border-gray-200">
            
            
<!-- ADVENTURE 1: GALAXY (Main Tab Content) -->
<div id="adventure-1" class="tab-pane">
    <h2 class="text-2xl font-bold text-gray-800 mb-4">AI Legal Tech Galaxy</h2>
    <div class="main-container-galaxy bg-[#0d1117] min-h-screen p-4 sm:p-8">
        <!-- Tooltip element added for hover text -->
        <div id="tooltip"></div>
        
        <div class="text-center p-6 bg-gray-900 bg-opacity-80 text-gray-400 w-full max-w-xl rounded-lg mb-10 mt-4 shadow-xl mx-auto">
            <p class="text-lg font-bold text-yellow-400">AI Legal Tech Galaxy</p>
            <p class="mt-2 text-sm">This visualization maps the Legal Tech Ecosystem around the **LRC Core**. **Hover over planets/moons to see usage descriptions, and click them for the detailed In-House When to Use Guide!**</p>
            <p class="mt-1 text-xs">Platforms with components (moons) indicate native AI applications.</p>
        </div>

        <!-- Main Galaxy Visualization Container -->
        <div id="galaxy-system">
            
            <!-- Sun/Core -->
            <div class="sun" id="sun-core" data-system-name="Legal, Regulatory, & Compliance Core">
                <div class="text-center flex flex-col justify-center items-center h-full w-full">
                    <!-- New Image Logo -->
                    <img 
                        src="https://companieslogo.com/img/orig/PCOR-33258035.png?t=1720244493" 
                        onerror="this.onerror=null;this.src='https://placehold.co/100x100/e65100/111827?text=LRC';" 
                        alt="PCOR Logo" 
                        style="max-width: 60%; max-height: 60%; object-fit: contain; margin-bottom: 0.25vmin; border-radius: 4px;"
                    >
                    <!-- Full Name (Text adjusted to fit) -->
                    <div style="font-size: 1.1vmin; font-weight: 600; line-height: 1.1; padding: 0 0.25vmin; white-space: normal;">Legal, Regulatory, & Compliance</div>
                </div>
            </div>
            
            <!-- Planets and Moons are drawn dynamically by JS -->
        </div>

        <!-- NEW USAGE MATRIX SECTION - REMOVED from here -->

        <!-- Cheat Sheet Side Panel (The Modal/Sidebar) -->
        <div id="cheat-sheet-panel" class="fixed top-0 right-0 h-full w-full md:w-1/3 bg-gray-900 border-l border-orange-600 shadow-2xl p-6 overflow-y-auto z-50">
            <div class="flex justify-between items-start mb-6 border-b border-gray-700 pb-4">
                <h2 id="sheet-title" class="text-2xl font-bold text-yellow-400 pr-4"></h2>
                <button id="close-sheet-btn" class="text-gray-400 hover:text-white text-4xl leading-none">
                    &times; <!-- Close symbol -->
                </button>
            </div>
            <div id="sheet-content">
                <!-- Content injected here -->
            </div>
        </div>
    </div>
</div>

<!-- NEW ADVENTURE MATRIX TAB -->
<div id="adventure-matrix" class="tab-pane hidden">
    <h2 class="text-2xl font-bold text-gray-800 mb-4">Usage Matrix: Tool Capabilities</h2>
    <!-- Matrix will be rendered here by JS -->
    <div id="matrix-content-target" class="w-full max-w-full mx-auto px-4">
        <!-- Content injected by renderUsageMatrix() -->
    </div>
</div>

<!-- NEW PARENT TAB FOR ALL ADVENTURES (Tab 2-8) -->
<div id="adventures-parent" class="tab-pane hidden">
    <h2 class="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">AI Adventures</h2>

    <!-- Sub-Navigation for Adventures -->
    <nav id="sub-tab-nav" class="flex flex-wrap gap-2 mb-6 p-1 bg-gray-100 rounded-lg shadow-inner">
        <button id="btn-adventure-2" onclick="switchAdventureTab('adventure-2')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-black bg-[#ff5200] shadow-md">Prompt Enhancements</button>
        <button id="btn-adventure-3" onclick="switchAdventureTab('adventure-3')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">Deep Sea Dive</button>
        <button id="btn-adventure-4" onclick="switchAdventureTab('adventure-4')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">Desert Crossing</button>
        <button id="btn-adventure-5" onclick="switchAdventureTab('adventure-5')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">Jungle Trek</button>
        <button id="btn-adventure-6" onclick="switchAdventureTab('adventure-6')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">Space Odyssey</button>
        <button id="btn-adventure-7" onclick="switchAdventureTab('adventure-7')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">Arctic Discovery</button>
        <button id="btn-adventure-8" onclick="switchAdventureTab('adventure-8')" class="sub-tab-button flex-1 min-w-[120px] py-2 px-3 text-xs font-semibold rounded-lg text-gray-600 bg-gray-200 hover:bg-[#ff5200] hover:text-black">Volcano Summit</button>
    </nav>

    <!-- Sub Content Container -->
    <div id="sub-content-container">
            
        <!-- ADVENTURE 2: MAP (Prompt Enhancements) -->
        <div id="adventure-2" class="sub-adventure-pane">
            <h2 class="text-2xl font-bold text-gray-800 mb-2">Prompt Enhancements</h2>
            <p class="text-gray-600 mb-6">Follow the path through the city to all four destinations. Click "Next Stop" to advance the route.</p>

            
        <div id="statusCard" class="bg-gray-50 p-4 rounded-xl shadow-md mb-6 border-l-4 border-[#ff5200]">
                <p class="font-semibold text-gray-700">Current Status:</p>
                <p id="currentStatusText" class="text-lg text-blue-700"></p>
            </div>

            
        <div class="flex flex-col lg:flex-row gap-6">
                
        <div class="flex-grow">
                    <canvas id="mapCanvas" width="800" height="500" class="w-full h-auto"></canvas>
                </div>

                
        <div class="lg:w-64 flex flex-col space-y-4">
                    
        <button id="nextStopBtn" onclick="nextStop()"
                                class="btn-primary bg-[#ff5200] text-black font-semibold py-3 px-6 rounded-lg shadow-lg hover:opacity-90 disabled:bg-gray-400">
                            Next Stop
                        </button>
                        <button id="resetBtn" onclick="resetMap()"
                                class="btn-primary bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg shadow-lg hover:bg-gray-600">
                            Reset Route
                        </button>
                        
        <div class="bg-gray-50 p-4 rounded-xl shadow-inner border border-gray-200">
                            <h3 class="font-bold text-gray-800 mb-2">Stops</h3>
                            <ul id="stopList" class="space-y-2 text-sm text-gray-600">
                                

        </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div id="adventure-3" class="sub-adventure-pane hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Deep Sea Dive</h2>
                <p class="text-lg text-gray-600">Dive into the Mariana Trench and explore bioluminescent creatures and ancient shipwrecks.</p>
                <div class="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200 text-blue-800">
                    
                </div>
            </div>

            <div id="adventure-4" class="sub-adventure-pane hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Desert Crossing</h2>
                <p class="text-lg text-gray-600">Navigate the scorching sands of the Sahara, managing water and resources to reach the oasis.</p>
                <div class="mt-4 p-4 bg-amber-50 rounded-lg border border-amber-200 text-amber-800">
                    
                </div>
            </div>

            <div id="adventure-5" class="sub-adventure-pane hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Jungle Trek</h2>
                <p class="text-lg text-gray-600">An immersive journey through the Amazon rainforest, identifying flora and fauna.</p>
                <div class="mt-4 p-4 bg-green-50 rounded-lg border border-green-200 text-green-800">
                    
                </div>
            </div>

            <div id="adventure-6" class="sub-adventure-pane hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Space Odyssey</h2>
                <p class="text-lg text-gray-600">Launch into orbit! A simulation of piloting a starship to distant planets.</p>
                <div class="mt-4 p-4 bg-indigo-50 rounded-lg border border-indigo-200 text-indigo-800">
                    
                </div>
            </div>

            <div id="adventure-7" class="sub-adventure-pane hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Arctic Discovery</h2>
                <p class="text-lg text-gray-600">Establish a research station and track wildlife across the frozen polar tundra.</p>
                <div class="mt-4 p-4 bg-sky-50 rounded-lg border border-sky-200 text-sky-800">
                    
                </div>
            </div>

            <div id="adventure-8" class="sub-adventure-pane hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Volcano Summit</h2>
                <p class="text-lg text-gray-600">Ascend an active volcano, measuring seismic activity and dodging molten hazards.</p>
                <div class="mt-4 p-4 bg-red-50 rounded-lg border border-red-200 text-red-800">
                    
                </div>
            </div>

    </div>
</div>
        </div>
    </div>

    <script>
        // --- Tab Management Logic ---
        
        // Global states
        let activeMainTab = 'adventure-1';
        let activeSubTab = 'adventure-2'; // Default sub-adventure

        /**
         * Handles the click on the main top navigation tabs.
         * @param {string} tabId - 'adventure-1', 'adventures-parent', or 'adventure-matrix'.
         */
        function switchMainTab(tabId) {
            activeMainTab = tabId;

            // 1. Hide all top-level content panes
            document.getElementById('adventure-1').classList.add('hidden');
            document.getElementById('adventures-parent').classList.add('hidden');
            document.getElementById('adventure-matrix').classList.add('hidden'); // NEW

            
            // 2. Show the selected main content pane
            const targetPane = document.getElementById(tabId);
            if (targetPane) {
                targetPane.classList.remove('hidden');
            }

            // 3. Update main button styling
            document.querySelectorAll('#main-tab-nav .tab-button').forEach(button => {
                // Reset to inactive style
                button.classList.remove('bg-[#ff5200]', 'text-black', 'shadow-md');
                button.classList.add('bg-gray-200', 'text-gray-600', 'hover:bg-[#ff5200]', 'hover:text-black');
                
                // Apply active style
                if (button.id === `btn-main-${tabId.replace('-', '')}`) {
                    button.classList.remove('bg-gray-200', 'text-gray-600', 'hover:bg-[#ff5200]', 'hover:text-black');
                    button.classList.add('bg-[#ff5200]', 'text-black', 'shadow-md');
                }
            });

            // 4. Special calls/Initialization
            if (tabId === 'adventures-parent') {
                // If switching to the parent, ensure the last active sub-tab is shown
                switchAdventureTab(activeSubTab);
            } else if (tabId === 'adventure-1') { 
                // Call the galaxy's initialization logic
                setTimeout(() => {
                    galaxyInitStaticElements();
                    recalculateGalaxy();
                }, 50);
            } else if (tabId === 'adventure-matrix') { 
                // Render the matrix on demand for the new page
                renderUsageMatrix(); 
            }
        }


        /**
         * Handles the click on the sub-navigation tabs (inside AI Adventures).
         * This replaces the old switchTab logic.
         * @param {string} tabId - The ID of the adventure tab to switch to (e.g., 'adventure-2').
         */
        function switchAdventureTab(tabId) {
            activeSubTab = tabId;

            // 1. Hide all sub-content panes (adventure-2 through adventure-8)
            const subContentContainer = document.getElementById('sub-content-container');
            if (subContentContainer) {
                subContentContainer.querySelectorAll('.sub-adventure-pane').forEach(pane => {
                    pane.classList.add('hidden');
                });
            }

            // 2. Show the selected sub-tab content
            const targetPane = document.getElementById(tabId);
            if (targetPane) {
                targetPane.classList.remove('hidden');
            }

            // 3. Update active sub-button styling
            document.querySelectorAll('#sub-tab-nav .sub-tab-button').forEach(button => {
                // Reset to inactive style
                button.classList.remove('bg-[#ff5200]', 'text-black', 'shadow-md');
                button.classList.add('bg-gray-200', 'text-gray-600', 'hover:bg-[#ff5200]', 'hover:text-black');
                
                // Apply active style
                if (button.id === `btn-${tabId}`) {
                    button.classList.remove('bg-gray-200', 'text-gray-600', 'hover:bg-[#ff5200]', 'hover:text-black');
                    button.classList.add('bg-[#ff5200]', 'text-black', 'shadow-md');
                }
            });

            // 4. Special calls for canvas redrawing on tab switch
            if (tabId === 'adventure-2') { // Prompt Enhancements map
                setTimeout(drawMap, 50);
            }
        }
        
        // --- Map Simulation Logic (Adventure 2: Prompt Enhancements) ---

        // Global variables for the Map
        const canvas = document.getElementById('mapCanvas');
        const ctx = canvas.getContext('2d');
        const startIconUrl = "https://cdn-icons-png.flaticon.com/512/602/602232.png";
        const harveyIconUrl = "https://logo.clearbit.com/www.harvey.ai"; 
        const topRigthIconUrl = "https://cdn-icons-png.flaticon.com/512/2098/2098439.png"; // Building image URL
        const geminiIconUrl = "https://logo.clearbit.com/agentspace.google.com"; // New: Gemini Logo URL

        let startIcon = new Image();
        let harveyIcon = new Image(); 
        let topRigthIcon = new Image(); 
        let geminiIcon = new Image(); // New: Gemini Image object

        let imagesLoadedCount = 0;
        const totalImagesToLoad = 4; // Updated from 3 to 4

        function imageLoaded() {
            imagesLoadedCount++;
            if (imagesLoadedCount === totalImagesToLoad) {
                drawMap();
            }
        }

        startIcon.onload = imageLoaded;
        startIcon.onerror = () => { console.error("Failed to load starting icon image. Using fallback circle."); imageLoaded(); };
        startIcon.src = startIconUrl;

        harveyIcon.onload = imageLoaded;
        harveyIcon.onerror = () => { console.error("Failed to load Harvey.ai icon image. Using fallback circle."); imageLoaded(); };
        harveyIcon.src = harveyIconUrl; 
        
        topRigthIcon.onload = imageLoaded;
        topRigthIcon.onerror = () => { console.error("Failed to load top right icon image."); imageLoaded(); };
        topRigthIcon.src = topRigthIconUrl;
        
        geminiIcon.onload = imageLoaded; // New: Load Gemini icon
        geminiIcon.onerror = () => { console.error("Failed to load Gemini icon image. Using fallback circle."); imageLoaded(); };
        geminiIcon.src = geminiIconUrl;


        let currentSegment = 0;
        const totalStops = 4;

        // UPDATED STOPS: Removed old numbering from names
        const stops = [
            { x: 100, y: 400, name: "Initial Prompt", color: '#EF4444' }, // Index 0 (Start)
            { x: 450, y: 100, name: "Harvey.ai", color: '#F59E0B' }, // Index 1 (New Stop 1)
            { x: 700, y: 250, name: "Gemini 2.5 Pro", color: '#10B981' }, // Index 2 (New Stop 2)
            { x: 300, y: 450, name: "Final Output", color: '#6366F1' } // Index 3 (New Stop 3)
        ];
        
        // Utility function to draw a rounded rectangle (for the button effect)
        function roundRect(ctx, x, y, w, h, r) {
            if (w < 2 * r) r = w / 2;
            if (h < 2 * r) r = h / 2;
            ctx.beginPath();
            ctx.moveTo(x + r, y);
            ctx.arcTo(x + w, y, x + w, y + h, r);
            ctx.arcTo(x + w, y + h, x, y + h, r);
            ctx.arcTo(x, y + h, x, y, r);
            ctx.arcTo(x, y, x + w, y, r);
            ctx.closePath();
        }


        // --- UPDATED CITY BACKGROUND LOGIC ---
        function drawBackground() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#f9fafb'; // Light base
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw wide vertical road (Gray 200)
            ctx.fillStyle = '#e5e7eb';
            ctx.fillRect(350, 0, 100, 500);
            
            // Draw horizontal road (Gray 200)
            ctx.fillRect(0, 200, 800, 100);

            // Draw "City Blocks" (Custom colors)
            // Bottom-Left (HEX#ece0d6)
            const blX = 50, blY = 320, blW = 280, blH = 150;
            ctx.fillStyle = '#ece0d6';
            ctx.fillRect(blX, blY, blW, blH);
            
            // Top-Left (HEX#cec4a1) - CLEANED UP
            const tlX = 50, tlY = 30, tlW = 280, tlH = 150;
            ctx.fillStyle = '#cec4a1';
            ctx.fillRect(tlX, tlY, tlW, tlH);

            // Top-Right (HEX#566578) - TARGET FOR BUILDING ICON
            const trX = 470, trY = 30, trW = 280, trH = 150;
            ctx.fillStyle = '#566578';
            ctx.fillRect(trX, trY, trW, trH);
            
            // Bottom-Right (HEX#8d6e5b)
            const brX = 470, brY = 320, brW = 280, brH = 150;
            ctx.fillStyle = '#8d6e5b';
            ctx.fillRect(brX, brY, brW, brH);


            // Draw a simple border
            ctx.strokeStyle = '#9ca3af';
            ctx.lineWidth = 2;
            ctx.strokeRect(0, 0, canvas.width, canvas.height);

            // --- Draw Top-Right Building Icon (Moved) ---
            if (topRigthIcon.complete && topRigthIcon.src) {
                const iconSize = 90; // Same size as start icon
                
                // Adjusted position: Close to top-right corner of the block (Moved 5px closer)
                const padding = 5; 
                const iconX = trX + trW - iconSize - padding; 
                const iconY = trY + padding;
                
                // Draw the image
                ctx.drawImage(topRigthIcon, iconX, iconY, iconSize, iconSize);
            }
        }
        // --- END UPDATED CITY BACKGROUND LOGIC ---

        function updateStatusText() {
            const statusEl = document.getElementById('currentStatusText');
            const nextStopBtn = document.getElementById('nextStopBtn');
            const resetBtn = document.getElementById('resetBtn');

            resetBtn.disabled = currentSegment === 0;

            if (currentSegment === 0) {
                // Ready to start to Stop 1
                statusEl.textContent = "Ready to start the route to Stop 1: " + stops[1].name + ".";
                nextStopBtn.textContent = "Next Stop";
                nextStopBtn.disabled = false;
            } else if (currentSegment < totalStops - 1) {
                // currentSegment = 1 (to Stop 2) or 2 (to Stop 3)
                const nextStopNumber = currentSegment + 1;
                const nextStopName = stops[nextStopNumber].name;
                statusEl.textContent = `En route to Stop ${nextStopNumber}: ${nextStopName} (${currentSegment} of 3 segments complete).`;
                nextStopBtn.textContent = "Next Stop";
                nextStopBtn.disabled = false;
            } else {
                statusEl.textContent = `Route Complete! All 3 stops visited.`;
                nextStopBtn.textContent = "Route Complete";
                nextStopBtn.disabled = true;
            }
        }
        
        
        function drawRoute() {
            ctx.lineWidth = 8;
            ctx.lineCap = 'round';

            for (let i = 0; i < stops.length - 1; i++) {
                const start = stops[i];
                const end = stops[i + 1];

                ctx.beginPath();
                ctx.moveTo(start.x, start.y);
                ctx.lineTo(end.x, end.y);

                if (i + 1 <= currentSegment) {
                    ctx.strokeStyle = '#ff5200';
                    ctx.setLineDash([]);
                } else {
                    ctx.strokeStyle = '#9ca3af';
                    ctx.setLineDash([10, 10]);
                }
                ctx.stroke();
            }
            ctx.setLineDash([]);
        }

        function drawMarkers() {
            const markerSize = 90; // For the initial building icon (Stop 0)
            const otherMarkerRadius = 15; // For generic circle markers (Stop 3 / Index 3)
            
            // Harvey/Gemini icon dimensions (Large image circle)
            const iconCircleRadius = 50; 
            const iconImageSize = iconCircleRadius * 2; 
            
            const fallbackRadius = 23;
            
            // Text style for ALL labels on map
            const labelBgColor = '#ff5200'; // Procore Orange
            const labelTextColor = '#ffffff'; // White text
            const labelFont = '700 12px Inter'; // Bold
            const labelPaddingX = 10;
            const labelPaddingY = 5;
            const labelRadius = 8;

            // NEW: Border thickness
            const circleBorderWidth = 1.5;

            stops.forEach((stop, index) => {
                
                const stopName = stop.name.toUpperCase();
                let yOffset;

                if (index === 0) { // Index 0: Initial Prompt (Start)
                    if (startIcon.complete && startIcon.src) {
                        ctx.drawImage(startIcon, stop.x - markerSize / 2, stop.y - markerSize, markerSize, markerSize);
                        yOffset = 10;
                    } else {
                        // Fallback logic for start icon
                        ctx.fillStyle = stop.color;
                        ctx.beginPath();
                        ctx.arc(stop.x, stop.y, fallbackRadius, 0, Math.PI * 2);
                        ctx.fill();
                        yOffset = fallbackRadius + 5;
                    }

                    // Draw START label (Custom Button Style)
                    ctx.font = labelFont;
                    const textWidth = ctx.measureText("START").width;
                    const rectWidth = textWidth + labelPaddingX * 2;
                    const rectHeight = 12 + labelPaddingY * 2; // 12px font height

                    const rectX = stop.x - rectWidth / 2;
                    const rectY = stop.y + yOffset;

                    ctx.fillStyle = labelBgColor;
                    roundRect(ctx, rectX, rectY, rectWidth, rectHeight, labelRadius);
                    ctx.fill();

                    ctx.fillStyle = labelTextColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText("START", stop.x, rectY + rectHeight / 2);

                } else if (index === 1 || index === 2) { // Index 1 (Harvey) and Index 2 (Gemini) - Large Image Circle
                    
                    const isVisited = index <= currentSegment;
                    const iconToDraw = (index === 1) ? harveyIcon : geminiIcon;
                    const color = stop.color;
                    
                    if (iconToDraw.complete && iconToDraw.src) {
                        
                        // 1. Draw solid background circle
                        ctx.beginPath();
                        ctx.arc(stop.x, stop.y, iconCircleRadius, 0, Math.PI * 2);
                        // Use the color for the background
                        ctx.fillStyle = isVisited ? color : '#6b7280'; 
                        ctx.fill(); 
                        
                        // 2. Set up the clipping mask on the circle area
                        ctx.save();
                        ctx.beginPath();
                        ctx.arc(stop.x, stop.y, iconCircleRadius, 0, Math.PI * 2, false);
                        ctx.clip();
                        
                        // 3. Draw the image, sized to fill the entire clipped circle area (100x100)
                        ctx.drawImage(
                            iconToDraw, 
                            stop.x - iconCircleRadius, 
                            stop.y - iconCircleRadius, 
                            iconImageSize, 
                            iconImageSize
                        );
                        ctx.restore(); // Restore the canvas context (removes clip mask)
                        
                        // Draw a border around the circle for prominence
                        ctx.strokeStyle = '#1f2937';
                        ctx.lineWidth = circleBorderWidth; // Thin border
                        ctx.beginPath();
                        ctx.arc(stop.x, stop.y, iconCircleRadius, 0, Math.PI * 2);
                        ctx.stroke();

                        yOffset = iconCircleRadius + 5;
                    } else {
                         // Fallback to generic circle
                        ctx.fillStyle = isVisited ? color : '#6b7280';
                        ctx.beginPath();
                        ctx.arc(stop.x, stop.y, otherMarkerRadius, 0, Math.PI * 2);
                        ctx.fill();
                        yOffset = otherMarkerRadius + 5;
                    }
                    
                    // Draw Label (Custom Button Style)
                    ctx.font = labelFont;
                    const textWidth = ctx.measureText(stopName).width;
                    const rectWidth = textWidth + labelPaddingX * 2;
                    const rectHeight = 12 + labelPaddingY * 2; 

                    const rectX = stop.x - rectWidth / 2;
                    const rectY = stop.y + yOffset;

                    ctx.fillStyle = labelBgColor;
                    roundRect(ctx, rectX, rectY, rectWidth, rectHeight, labelRadius);
                    ctx.fill();

                    ctx.fillStyle = labelTextColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(stopName, stop.x, rectY + rectHeight / 2);


                } else { // Index 3: Final Output (New Stop 3) - Small circle and button
                    const isVisited = index <= currentSegment;
                    
                    // Draw the circle background
                    ctx.fillStyle = isVisited ? stop.color : '#6b7280';
                    ctx.beginPath();
                    ctx.arc(stop.x, stop.y, otherMarkerRadius, 0, Math.PI * 2);
                    ctx.fill();

                    // Draw a border around the small circle
                    ctx.strokeStyle = '#1f2937';
                    ctx.lineWidth = circleBorderWidth; // Thin border
                    ctx.beginPath();
                    ctx.arc(stop.x, stop.y, otherMarkerRadius, 0, Math.PI * 2);
                    ctx.stroke();
                    
                    // Draw the Label (Custom Button Style)
                    const labelYOffset = otherMarkerRadius + 5;
                    ctx.font = labelFont;
                    const textWidth = ctx.measureText(stopName).width;
                    const rectWidth = textWidth + labelPaddingX * 2;
                    const rectHeight = 12 + labelPaddingY * 2; 

                    const rectX = stop.x - rectWidth / 2;
                    const rectY = stop.y + labelYOffset;

                    ctx.fillStyle = labelBgColor;
                    roundRect(ctx, rectX, rectY, rectWidth, rectHeight, labelRadius);
                    ctx.fill();

                    ctx.fillStyle = labelTextColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(stopName, stop.x, rectY + rectHeight / 2);
                }
            });
            ctx.textBaseline = 'alphabetic'; // Reset text baseline
        }
        
        function drawMap() {
            drawBackground();
            drawRoute();
            drawMarkers();
            populateStopList();
            updateStatusText();
        }

        function nextStop() {
            if (currentSegment < totalStops - 1) {
                currentSegment++;
                drawMap();
            }
        }

        function resetMap() {
            currentSegment = 0;
            drawMap();
        }

        function populateStopList() {
            const listEl = document.getElementById('stopList');
            if (!listEl) return;

            // Filter out the 'Initial Prompt' (Start) stop for the list
            const stopsForList = stops.slice(1);

            listEl.innerHTML = stopsForList.map((stop, index) => {
                const number = index + 1; // 1, 2, 3
                let status;
                
                if (number === 3) {
                    status = 'End';
                } else {
                    status = `Stop ${number}`;
                }
                
                const name = stop.name;
                
                return `
                    <li class="flex items-center">
                        <span style="background-color: ${stop.color};" class="inline-block w-3 h-3 rounded-full mr-2"></span>
                        ${status}: ${name}
                    </li>
                `;
            }).join('');
        }

        // --- END MAP SIMULATION LOGIC ---


        // --- START GALAXY DATA AND LOGIC ---
        // Global variables for Galaxy elements (defined outside IIFE in old code, must be available here)
        let cheatSheetPanel, sheetTitle, sheetContent, closeSheetBtn;
        
        // Define the master set of use cases for matrix rows
        const masterUseCases = {
            LR: "Legal Research & Precedent Analysis",
            CR: "Contract Review & Due Diligence",
            RM: "Regulatory & Competitive Monitoring",
            IK: "Internal Knowledge & Policy Q&A",
            CD: "Complex Drafting & Workflow Automation",
            SD: "Secure Data & Privileged Review",
        };

        // Define the shared logo content for Gemini Gems and NotebookLM
        const sharedGeminiMoonLogo = `<img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRYM-_oCfjiysWdSUR-8tzX8fUEtcdTo1naJg&s" onerror="this.onerror=null;this.src='https://placehold.co/100x100/0284c7/ffffff?text=GM';" alt="Gemini Moon Logo">`;

        // Updated galaxyData with usage descriptions, cheat sheet outlines, and capabilities for the matrix
        const galaxyData = [
            {
                name: "Harvey.ai", 
                colorClass: "color-purple", 
                sizeClass: "size-lg", 
                logo: `<img src="https://logo.clearbit.com/www.harvey.ai" onerror="this.src='https://placehold.co/100x100/7e22ce/ffffff?text=H';" alt="Harvey.ai Logo">`,
                isImageLogo: true, 
                usage: "Used for rapid **legal research, summarizing case law**, and drafting initial documents like memos and motions based on proprietary firm knowledge. Click for the full **In-House When to Use Guide**.",
                capabilities: { LR: true, CD: true },
                cheatSheet: {
                    title: "AI-Powered Legal Research and Drafting",
                    sections: [
                        {
                            heading: "Research & Memo Generation",
                            points: ["Draft first-pass legal memos (e.g., risk assessment memos, litigation strategy summaries) based on proprietary corporate knowledge and external case law.", "Generate instant summaries of complex judicial opinions or new regulatory filings, providing quick internal counsel on impact and strategy."]
                        },
                        {
                            heading: "Precedent Analysis",
                            points: ["Identify and extract relevant clauses, holdings, and precedents from the company’s internal contract/litigation history.", "Use AI to compare current legal issues against past company outcomes to forecast likely results and advise on litigation risk."]
                        },
                        {
                            heading: "Litigation & E-Discovery Support",
                            points: ["Automate the drafting of procedural documents (e.g., standard discovery responses, initial case management briefs).", "Rapidly analyze large volumes of litigation documents to surface key facts, privileged communications, and potentially responsive materials for early case assessment.", "Use AI to synthesize deposition transcripts and cross-reference witness testimony against document production."]
                        }
                    ]
                },
                moons: []
            },
            {
                name: "Law360 by LexisNexis", 
                colorClass: "color-red", 
                sizeClass: "size-lg", 
                logo: `<img src="https://www.law360.com/images/law360-stacked.png" onerror="this.src='https://placehold.co/100x100/dc2626/ffffff?text=L360';" alt="Law360 Logo">`,
                isImageLogo: true, 
                usage: "Used for **daily news aggregation**, staying current on regulatory changes, and tracking competitor litigation in specific jurisdictions. Click for the full **In-House When to Use Guide**.",
                capabilities: { RM: true },
                cheatSheet: {
                    title: "Competitive Intelligence & Regulatory Monitoring",
                    sections: [
                        {
                            heading: "Competitive & Litigation Tracking",
                            points: ["Set up real-time alerts for litigation filings and key procedural events involving competitors (e.g., M&A antitrust challenges, IP disputes).", "Automatically aggregate legal news impacting the company's core business sectors (e.g., FinTech, Pharma) for focused risk analysis."]
                        },
                        {
                            heading: "Regulatory Compliance & Alerts",
                            points: ["Filter global legislative and regulatory news to identify pending laws (e.g., AI governance, digital taxation) that require proactive policy updates.", "Deliver tailored digests and quick, essential summaries to Compliance, HR, and Executive teams."]
                        },
                        {
                            heading: "Executive Briefing Automation",
                            points: ["Generate weekly or monthly automated summary reports detailing the most significant legal and regulatory developments relevant to the executive leadership team.", "Customize the AI-generated news digest to focus on topics tied to corporate strategic objectives (e.g., M&A, international expansion, ESG enforcement).", "Provide historical data analysis to identify trends in regulatory scrutiny and litigation risk."]
                        }
                    ]
                },
                moons: []
            },
            {
                name: "Luminance", 
                colorClass: "color-green", 
                sizeClass: "size-lg", 
                logo: `<img src="https://logo.clearbit.com/www.luminance.com" onerror="this.src='https://placehold.co/100x100/059669/ffffff?text=L';" alt="Luminance Logo">`,
                isImageLogo: true,
                usage: "Used for **M&A due diligence**, quickly reviewing large volumes of contracts to identify and classify key clauses (e.g., change of control, indemnity). Click for the full **In-House When to Use Guide**.",
                capabilities: { CR: true },
                cheatSheet: {
                    title: "Contract Due Diligence and Review Automation",
                    sections: [
                        {
                            heading: "M&A Due Diligence",
                            points: ["Rapidly identify critical non-standard risk clauses (e.g., unlimited liability, unusual indemnity periods, restrictive covenants) in thousands of target company contracts.", "Create standardized reports flagging all documents that deviate from the company’s risk tolerance policy, reducing manual review time by 50-80%."]
                        },
                        {
                            heading: "Contract Classification & Indexing",
                            points: ["Automatically structure the company's entire contract portfolio by document type, governing law, counterparty, and termination date for improved search and retention.", "Facilitate post-signature compliance by querying the entire database for specific clause distribution (e.g., all contracts lacking a specific data security rider)."]
                        },
                        {
                            heading: "Post-Acquisition Integration",
                            points: ["Use AI to compare the acquired company's contracts against the parent company's standard agreements, identifying discrepancies requiring harmonization or renegotiation.", "Instantly flag critical contracts tied to 'change of control' clauses that were triggered by the acquisition, prioritizing vendor or customer communication.", "Generate summary data on contract terms to expedite sales and procurement integration for the newly merged entity."]
                        }
                    ]
                },
                moons: []
            },
            {
                name: "Rovo", 
                colorClass: "color-orange", 
                sizeClass: "size-lg", 
                logo: `<img src="https://logo.clearbit.com/www.atlassian.com" onerror="this.src='https://placehold.co/100x100/ea580c/ffffff?text=R';" alt="Rovo Logo">`,
                isImageLogo: true,
                usage: "Used for **internal knowledge retrieval**, answering employee questions instantly by searching across internal documents (policies, playbooks, forms). Click for the full **In-House When to Use Guide**.",
                capabilities: { IK: true },
                cheatSheet: {
                    title: "Internal Knowledge Management & AI Chatbot",
                    sections: [
                        {
                            heading: "Employee Self-Service",
                            points: ["Deploy a secure, internal-facing legal chatbot trained exclusively on approved corporate policies (e.g., expense policy, insider trading rules, data retention schedules).", "Provide instant, documented guidance to employees, significantly reducing direct legal team interaction for routine compliance questions."]
                        },
                        {
                            heading: "Legal Playbook Search",
                            points: ["Allow in-house counsel to ask complex, conversational queries (e.g., 'What are our indemnification limits for SaaS contracts in Germany?') and receive synthesized answers sourced directly from internal legal playbooks and archived legal opinions."]
                        },
                        {
                            heading: "Policy Generation & Updates",
                            points: ["Draft a first version of a new internal policy (e.g., social media usage, remote work guidelines) by synthesizing best practices from existing corporate handbooks and external legal data.", "Quickly compare draft policies against international regulatory checklists (e.g., data privacy standards) to ensure global compliance before final review.", "Automatically generate localized versions of global policies based on pre-vetted country-specific legal requirements."]
                        }
                    ]
                },
                moons: []
            },
            {
                name: "Gemini 2.5 Pro", 
                colorClass: "color-rainbow", 
                sizeClass: "size-lg", 
                logo: `<img src="https://logo.clearbit.com/agentspace.google.com" onerror="this.src='https://placehold.co/100x100/9400d3/ffffff?text=G2.5';" alt="Gemini 2.5 Pro Logo">`,
                isImageLogo: true,
                usage: "The **advanced generative AI platform** powering custom workflows and complex reasoning across legal data sets, including complex contract drafting and risk scoring. Click for the full **In-House When to Use Guide**.",
                capabilities: { LR: true, CR: true, IK: true, CD: true }, // Core platform capabilities
                cheatSheet: {
                    title: "Advanced Generative AI Platform",
                    sections: [
                        {
                            heading: "Complex Contract Drafting & Analysis",
                            points: ["Utilize custom models to draft bespoke, multi-jurisdictional agreements (e.g., complex licensing, joint venture terms) based on internal best practices.", "Use the platform's reasoning capabilities to reconcile conflicting clauses across a suite of related documents, ensuring contractual consistency."]
                        },
                        {
                            heading: "Risk Scoring & Compliance Automation",
                            points: ["Build automated workflows to analyze vendor contracts against internal security and compliance standards (e.g., GDPR, CCPA).", "Generate a single 'Risk Score' and a summary of necessary revisions before final legal review and approval."]
                        },
                        {
                            heading: "Cross-Platform Integration & Orchestration",
                            points: ["Serve as the central intelligence layer that integrates outputs from other tools (e.g., analyzing M&A risk identified by Luminance, then drafting necessary remediation agreements).", "Create and automate 'Legal Flows' that trigger compliance checks when specific corporate events occur (e.g., new vendor added to procurement system).", "Rapidly prototype bespoke AI applications tailored to niche, high-value legal processes not covered by off-the-shelf software."]
                        }
                    ]
                },
                moons: [
                    { 
                        name: "Gemini Gems", 
                        colorClass: "color-blue", 
                        sizeClass: "size-sm", 
                        // Using the shared logo content
                        logo: sharedGeminiMoonLogo,
                        isImageLogo: true, 
                        usage: "A specialized, secure version for **highly sensitive tasks** requiring maximum data isolation, suchs as privileged communication review. Click for the full **In-House When to Use Guide**.",
                        capabilities: { SD: true }, // Secure Data capability
                        cheatSheet: {
                            title: "Secure Data Isolation & Privileged Review",
                            sections: [
                                {
                                    heading: "Secure Environment for Sensitive Data",
                                    points: ["Use the isolated instance for highly confidential legal tasks, suchs as internal investigations, whistle-blower reports, or privileged communication review in litigation hold scenarios.", "Ensure that data processed here does not inform the training or context of general-purpose AI models."]
                                },
                                {
                                    heading: "Auditing & Data Governance",
                                    points: ["Maintain a forensic-ready audit trail detailing who used the model, the input provided, and the output generated during sensitive review periods.", "Fulfill strict e-discovery and data governance requirements for all privileged and sensitive legal work product."]
                                },
                                {
                                    heading: "Internal Compliance Investigations",
                                    points: ["Securely analyze employee communications (e.g., Slack, email data) during internal HR or compliance investigations to identify patterns of potential misconduct or policy violation.", "Use advanced prompt engineering to search for explicit language that could indicate fraud, collusion, or harassment without exposing the data to external LLM training pools.", "Generate fully redacted and summarized reports for the board or external auditors while retaining the original data in the secured environment."]
                                }
                            ]
                        }
                    },
                    { 
                        name: "NotebookLM", 
                        colorClass: "color-yellow", 
                        sizeClass: "size-sm", 
                        // Using the shared logo content (Same as Gemini Gems)
                        logo: sharedGeminiMoonLogo, 
                        isImageLogo: true,
                        usage: "Used for **deep document analysis** and synthesis, creating detailed reports and executive summaries from diverse sources (e.g., litigation transcripts, regulatory filings). Click for the full **In-House When to Use Guide**.",
                        capabilities: { LR: true, CR: true, IK: true }, // Analysis/Synthesis applies to these domains
                        cheatSheet: {
                            title: "Deep Document Analysis & Synthesis",
                            sections: [
                                {
                                    heading: "Case File Synthesis",
                                    points: ["In large-scale litigation, load all discovery documents, transcripts, and exhibits to generate unified witness summaries, cross-document timelines, and thematic relationship maps.", "This tool replaces weeks of manual synthesis work, offering rapid insight into complex factual patterns."]
                                },
                                {
                                    heading: "Executive Summaries & Risk Briefings",
                                    points: ["Generate objective executive briefing documents that distill the legal implications of new M&A targets or critical regulatory changes for non-legal leadership.", "Use the tool to 'cross-examine' a document set, testing assumptions and identifying internal inconsistencies before they become external vulnerabilities."]
                                },
                                {
                                    heading: "Training & Onboarding",
                                    points: ["Create customized 'Source Notes' for junior counsel or new hires by loading key regulatory guides and internal memoranda, allowing them to ask natural language questions about the documents.", "Develop interactive study guides from complex legal texts (e.g., HIPAA, Sarbanes-Oxley) to test and train the legal and compliance teams.", "Rapidly summarize all historical legal advice provided on a specific topic (e.g., data residency) to onboard an attorney quickly on a legacy matter."]
                        }
                    ]
                } 
            }
        ]
            }
        ];

        const coreUsage = { 
            name: "Legal, Regulatory, & Compliance Core",
            usage: "The central function governing organizational risk, legal operations, and adherence to global regulations. It serves as the **core mission** and hub for all integrated legal technology."
        };


        /**
         * Function to find data by name, including the core.
         */
        function findSystemData(name) {
            if (name === coreUsage.name) return coreUsage;
            
            let found = galaxyData.find(p => p.name === name);
            if (found) return found;

            for (const planet of galaxyData) {
                if (planet.moons) {
                    found = planet.moons.find(m => m.name === name);
                    if (found) return found;
                }
            }
            return { name: name, usage: 'Usage details is currently unavailable for this system.' };
        }

        /**
         * Shows the detailed cheat sheet side panel.
         * @param {Object} data The structured data for the planet/moon.
         */
        function showCheatSheet(data) {
            // Need to re-fetch elements as they might not exist on page load
            const cheatSheetPanel = document.getElementById('cheat-sheet-panel');
            const sheetTitle = document.getElementById('sheet-title');
            const sheetContent = document.getElementById('sheet-content');

            if (!data.cheatSheet || !cheatSheetPanel || !sheetTitle || !sheetContent) return; 

            // Close the hover tooltip immediately
            hideTooltip();

            sheetTitle.textContent = `${data.name}: When to Use`;
            
            let contentHtml = `<h3 class="text-xl font-bold text-yellow-400 mb-4">${data.cheatSheet.title}</h3>`;
            
            data.cheatSheet.sections.forEach(section => {
                contentHtml += `<h4 class="text-lg font-semibold mt-6 mb-2 text-orange-400">${section.heading}</h4>`;
                contentHtml += `<ul class="list-disc list-inside space-y-2 ml-4 text-gray-300">`;
                section.points.forEach(point => {
                    contentHtml += `<li>${point}</li>`;
                });
                contentHtml += `</ul>`;
            });
            
            sheetContent.innerHTML = contentHtml;
            cheatSheetPanel.classList.add('open');
        }
        
        /**
         * Hides the cheat sheet side panel.
         */
        function hideCheatSheet() {
             const cheatSheetPanel = document.getElementById('cheat-sheet-panel');
             if (cheatSheetPanel) {
                cheatSheetPanel.classList.remove('open');
             }
        }
        
        /**
         * Initializes static DOM elements and attaches required listeners.
         * Renamed to avoid conflict.
         */
        function galaxyInitStaticElements() {
            // Assign elements now that the DOM is loaded
            const closeSheetBtn = document.getElementById('close-sheet-btn');

            // Listener for closing the panel - now safe to attach
            if (closeSheetBtn) {
                closeSheetBtn.removeEventListener('click', hideCheatSheet); // Prevent duplicates
                closeSheetBtn.addEventListener('click', hideCheatSheet);
            }
        }

        /**
         * Shows the tooltip next to the hovered element.
         * @param {HTMLElement} element The planet, moon, or sun element being hovered.
         */
        function showTooltip(element) {
            const tooltip = document.getElementById('tooltip');
            const cheatSheetPanel = document.getElementById('cheat-sheet-panel');
            if (!tooltip) return;

            // If the cheat sheet is open, don't show tooltips
            if (cheatSheetPanel && cheatSheetPanel.classList.contains('open')) return;

            const name = element.getAttribute('data-system-name');
            const data = findSystemData(name);
            
            if (!data || !data.usage) return hideTooltip();

            const rect = element.getBoundingClientRect();
            
            // Content with strong tags from the usage string
            const usageHtml = element.getAttribute('data-usage');

            tooltip.innerHTML = `<h4>${data.name}</h4><p>${usageHtml}</p>`;

            // Determine position: Place to the right if possible, otherwise to the left.
            let x = rect.right + 10;
            let y = rect.top + (rect.height / 2);
            
            // Adjust position if it goes off the right edge
            if (x + tooltip.offsetWidth > window.innerWidth) {
                x = rect.left - tooltip.offsetWidth - 10; // Move to the left of the element
                if (x < 0) x = 10; // Fallback for very small screens
            }
            
            // Adjust y position to center the tooltip vertically relative to the element
            y -= tooltip.offsetHeight / 2;
            
            // Prevent tooltip from going off the top/bottom of the screen
            if (y < 10) y = 10;
            if (y + tooltip.offsetHeight > window.innerHeight) {
                y = window.innerHeight - tooltip.offsetHeight - 10;
            }
            
            tooltip.style.left = `${x}px`;
            tooltip.style.top = `${y}px`;
            tooltip.style.opacity = '1';
            tooltip.style.pointerEvents = 'auto';
        }

        /**
         * Hides the tooltip.
         */
        function hideTooltip() {
            const tooltip = document.getElementById('tooltip');
            if (tooltip) {
                tooltip.style.opacity = '0';
                tooltip.style.pointerEvents = 'none';
            }
        }

        /**
         * Removes all dynamically generated elements (planets, moons, SVG lines).
         */
        function clearGalaxy() {
            const galaxySystem = document.getElementById('galaxy-system');
            if (!galaxySystem) return;

            // Remove existing SVG element
            const existingSvg = galaxySystem.querySelector('svg');
            if (existingSvg) {
                existingSvg.remove();
            }
            // Remove existing planets and moons (everything except the sun/core)
            const planets = galaxySystem.querySelectorAll('.planet');
            planets.forEach(p => p.remove());
        }
        
        /**
         * Renders the capability matrix inside the new matrix tab.
         */
        function renderUsageMatrix() {
            // Updated target ID
            const matrixContainer = document.getElementById('matrix-content-target');
            if (!matrixContainer) return;
            matrixContainer.innerHTML = ''; // Clear previous content

            // Collect all tools (planets and moons) into a flat array
            const allTools = galaxyData.flatMap(p => [p, ...(p.moons || [])]);

            // Total columns: 1 (Use Case) + number of Tools
            const totalColumns = allTools.length + 1;
            // Calculate a responsive grid based on number of tools (min 2, max 7 for grid-cols-7)
            const gridClass = `grid-cols-1 md:grid-cols-2 lg:grid-cols-${Math.min(totalColumns, 8)}`;


            // 1. Create the header row (Tool Names and LOGOS)
            let toolsHeader = allTools.map(tool => {
                let rawLogoContent;
                let logoClasses = tool.colorClass; 
                
                // Determine content for the logo circle
                if (tool.isImageLogo) {
                    // For image logos, use the HTML content from the logo property
                    rawLogoContent = tool.logo;
                    logoClasses += ' bg-white'; // Set background to white for clear logo contrast
                } else {
                    // For placeholder text logos (like GG for Gems), use the text and white background
                    rawLogoContent = `<span class="text-sm font-bold text-gray-800">${tool.logo}</span>`;
                    logoClasses = ' bg-white';
                }

                // Wrap the logo and name together
                return `
                    <div class="p-3 font-semibold text-center truncate bg-gray-700 text-yellow-400 border border-gray-600 shadow-md rounded-t-lg flex flex-col items-center justify-center h-full">
                        <!-- UPDATED SIZE: w-16 h-16 -->
                        <div class="w-16 h-16 flex items-center justify-center mb-1 rounded-full overflow-hidden p-1 ${logoClasses}" style="min-width: 4rem;">
                            ${rawLogoContent}
                        </div>
                        <span class="text-sm">${tool.name}</span>
                    </div>
                `;
            }).join('');

            let headerRow = `
                <div class="grid ${gridClass} gap-0 border-b-2 border-orange-600 bg-gray-800 rounded-t-lg">
                    <div class="p-3 font-bold text-lg border-r-2 border-orange-600 text-left text-orange-400 flex items-center">Core Use Cases</div>
                    ${toolsHeader}
                </div>
            `;

            // 2. Create the data rows
            let matrixBody = '';
            const useCaseKeys = Object.keys(masterUseCases);

            useCaseKeys.forEach(key => {
                const useCaseName = masterUseCases[key];
                
                // Start the row (Use Case Name column)
                let rowHtml = `
                    <div class="p-3 font-medium border-b border-gray-700 text-left text-gray-300 flex items-center bg-gray-800">
                        ${useCaseName}
                    </div>
                `;

                // Add cells for each tool
                allTools.forEach(tool => {
                    // Check if the tool has the specific capability
                    const hasCapability = tool.capabilities && tool.capabilities[key];
                    
                    // Use a checkmark for presence, a dash for absence
                    const checkMark = hasCapability 
                        ? `<span class="text-xl text-green-500 font-bold">✓</span>` 
                        : `<span class="text-xl text-gray-600 font-medium">—</span>`;
                    
                    rowHtml += `
                        <div class="p-3 border-b border-gray-700 text-center flex justify-center items-center bg-gray-900 hover:bg-gray-800 transition duration-150">
                            ${checkMark}
                        </div>
                    `;
                });
                
                // Close the row
                matrixBody += `<div class="grid ${gridClass} gap-0">${rowHtml}</div>`;
            });

            // 3. Assemble and inject
            matrixContainer.innerHTML = `
                <div class="text-center p-6 bg-gray-50 rounded-lg mb-6 shadow-md">
                    <p class="text-lg font-bold text-gray-800">Review the core capabilities of each tool across key Legal, Regulatory, and Compliance use cases.</p>
                </div>
                <div class="matrix-table min-w-full overflow-x-auto">
                    <!-- Re-applying the dark theme styles for the matrix table itself -->
                    <div class="min-w-[1200px] lg:min-w-full bg-gray-900 rounded-xl shadow-2xl">
                        ${headerRow}
                        ${matrixBody}
                    </div>
                </div>
            `;
        }


        /**
         * Calculates dimensions and redraws the entire galaxy system.
         */
        function recalculateGalaxy() {
            const galaxySystem = document.getElementById('galaxy-system');
            const sunElement = document.getElementById('sun-core');

            // Crucial check: only run if the elements exist (i.e., we are on the correct tab)
            if (!galaxySystem || !sunElement || activeMainTab !== 'adventure-1') { 
                 clearGalaxy(); // Clean up if running unexpectedly
                 return;
            }

            clearGalaxy(); // Clear old elements before redrawing
            
            // Ensure the sun's name is updated in the DOM
            sunElement.setAttribute('data-system-name', coreUsage.name); 

            // Get the actual runtime size of the container (in pixels)
            const size = galaxySystem.offsetWidth;
            const centerX = Math.round(size / 2); // ROUNDED
            const centerY = Math.round(size / 2); // ROUNDED
            
            // R (Radius): 40% of the container width/height
            const R = size * 0.40; 
            
            // R_MOON (Moon distance): 20% of the container width/height
            const R_MOON = size * 0.20; 

            const numPlanets = galaxyData.length;
            const angleStep = 360 / numPlanets;
            
            // Create SVG container for lines (spokes)
            const svgNS = "http://www.w3.org/2000/svg";
            const svg = document.createElementNS(svgNS, 'svg');
            svg.setAttribute('width', '100%');
            svg.setAttribute('height', '100%');
            svg.style.position = 'absolute';
            svg.style.top = '0';
            svg.style.left = '0';
            svg.style.zIndex = '5';
            galaxySystem.insertBefore(svg, sunElement.nextSibling);

            galaxyData.forEach((planetData, index) => {
                // Calculate angle (start at 90 degrees - straight up, then increment)
                const angleDeg = 90 + (index * angleStep);
                const angleRad = angleDeg * (Math.PI / 180);

                // Calculate (x, y) position on the circle
                const x = centerX + R * Math.cos(angleRad);
                const y = centerY - R * Math.sin(angleRad);
                
                // ROUNDED COORDINATES FOR ALIGNMENT
                const x_round = Math.round(x);
                const y_round = Math.round(y);


                // 1. Create the connecting line (Sun to Planet Spoke)
                const line = document.createElementNS(svgNS, 'line');
                line.setAttribute('x1', centerX);
                line.setAttribute('y1', centerY);
                line.setAttribute('x2', x_round);
                line.setAttribute('y2', y_round);
                line.setAttribute('stroke', 'rgba(255, 255, 255, 0.2)');
                line.setAttribute('stroke-width', '2');
                svg.appendChild(line);

                // 2. Create the planet element
                const planet = document.createElement('div');
                planet.className = `planet ${planetData.sizeClass}`;
                
                // Position the planet absolutely using calculated coordinates
                planet.style.top = `${y_round}px`;
                planet.style.left = `${x_round}px`;
                planet.setAttribute('data-system-name', planetData.name); 

                // 3. Create the planet's visual body (logo/color)
                const planetLogo = document.createElement('div');
                planetLogo.className = `planet-logo ${planetData.colorClass}`;
                
                if (planetData.isImageLogo) {
                    planetLogo.innerHTML = planetData.logo;
                } else {
                    planetLogo.innerHTML = `<span class="logo-placeholder">${planetData.logo}</span>`;
                }
                
                // 4. Create the name tag
                const planetName = document.createElement('span');
                planetName.className = 'planet-name';
                planetName.textContent = planetData.name;
                
                planet.appendChild(planetLogo);
                planet.appendChild(planetName);

                // 5. Add moons and Moon Spoke lines
                if (planetData.moons.length > 0) {
                    const moonPath = document.createElement('div');
                    moonPath.className = 'moon-path';
                    
                    planet.appendChild(moonPath); 
                    
                    // Set the counter-clockwise rotation offset in degrees
                    const rotationOffsetDeg = -30;

                    planetData.moons.forEach((moonData, moonIndex) => {
                        // Calculate moon's fixed local angle (0 and 180 for 2 moons, plus the -30-degree offset)
                        const initialAngle = moonIndex * (360 / planetData.moons.length); 
                        const localAngleDeg = initialAngle + rotationOffsetDeg;
                        const localAngleRad = localAngleDeg * (Math.PI / 180);

                        // Calculate Moon's absolute center coordinates for SVG line endpoint
                        const moon_x_abs = x_round + R_MOON * Math.cos(localAngleRad);
                        const moon_y_abs = y_round - R_MOON * Math.sin(localAngleRad);

                        // ROUNDED MOON ABSOLUTE COORDINATES
                        const moon_x_abs_round = Math.round(moon_x_abs);
                        const moon_y_abs_round = Math.round(moon_y_abs);

                        // Draw Moon Spoke (Planet center to Moon center)
                        const moon_line = document.createElementNS(svgNS, 'line');
                        moon_line.setAttribute('x1', x_round); // ROUNDED planet center
                        moon_line.setAttribute('y1', y_round); // ROUNDED planet center
                        moon_line.setAttribute('x2', moon_x_abs_round); // ROUNDED moon center
                        moon_line.setAttribute('y2', moon_y_abs_round); // ROUNDED moon center
                        moon_line.setAttribute('stroke', 'rgba(255, 255, 255, 0.4)'); 
                        moon_line.setAttribute('stroke-width', '1');
                        svg.appendChild(moon_line);

                        // Create the moon element (positioned relative to the moon-path container at planet center)
                        const moon = document.createElement('div');
                        moon.className = `moon ${moonData.sizeClass} ${moonData.colorClass}`;
                        moon.setAttribute('data-system-name', moonData.name); 

                        // Calculate moon's position relative to the planet's center point (50% of planet width)
                        const moon_x_rel = R_MOON * Math.cos(localAngleRad); 
                        const moon_y_rel = R_MOON * Math.sin(localAngleRad); 
                        
                        // Position the moon relative to the 1px moonPath container.
                        moon.style.left = `${Math.round(moon_x_rel)}px`;
                        moon.style.top = `${Math.round(-moon_y_rel)}px`; // Y-axis is inverted

                        const moonLogo = document.createElement('div');
                        moonLogo.style.width = '95%';
                        moonLogo.style.height = '95%';
                        // The moon-logo class now ensures circular shape
                        moonLogo.className = 'rounded-full flex justify-center items-center bg-gray-100 moon-logo';
                        
                        // Check if it's an image logo or just text for the moon
                        if (moonData.isImageLogo) {
                            moonLogo.innerHTML = moonData.logo;
                        } else {
                            moonLogo.innerHTML = `<span class="text-xs font-bold text-gray-800">${moonData.logo}</span>`;
                        }
                        
                        const moonName = document.createElement('span');
                        moonName.className = 'moon-name';
                        moonName.textContent = moonData.name;

                        moon.appendChild(moonLogo);
                        moon.appendChild(moonName);
                        moonPath.appendChild(moon);
                    });
                }

                galaxySystem.appendChild(planet);
            });
            
            // --- INTERACTION LOGIC ---
            // Re-attach listeners to the newly created elements
            const interactiveElements = [sunElement, ...document.querySelectorAll('.planet'), ...document.querySelectorAll('.moon')];
            
            interactiveElements.forEach(item => {
                const name = item.getAttribute('data-system-name');
                const data = findSystemData(name);

                // 1. Tooltip (on hover) logic
                // EXCLUDE: Do not apply hover listener or data-usage to the core element (id="sun-core")
                if (data && data.usage && item.id !== 'sun-core') {
                    // Replace markdown bolding for display in the tooltip
                    const usageHtml = data.usage.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                    item.setAttribute('data-usage', usageHtml);
                    
                    item.removeEventListener('mouseover', showTooltip); // Prevent duplicates
                    item.addEventListener('mouseover', function() {
                        const usageHtml = this.getAttribute('data-usage');
                        if (usageHtml) {
                            showTooltip(this);
                        }
                    });
                    item.removeEventListener('mouseout', hideTooltip); // Prevent duplicates
                    item.addEventListener('mouseout', hideTooltip);
                }
                
                // 2. Cheat Sheet (on click) logic - ONLY for planets and moons, not the core
                if (data.cheatSheet) {
                    item.removeEventListener('click', showCheatSheet); // Prevent duplicates
                    item.addEventListener('click', function() {
                        showCheatSheet(data);
                    });
                }
            });
            // --- END INTERACTION LOGIC ---
            
            // RENDER THE MATRIX - REMOVED from here
        } // End recalculateGalaxy function
        
        // --- END GALAXY DATA AND LOGIC ---
        
        // --- Initialization ---
        window.onload = function() {
            // Initial load: switch to Legal Tech AI Galaxy
            switchMainTab('adventure-1'); 
            // Attach galaxy resize listener globally (it will check if the tab is active before drawing)
            window.addEventListener('resize', recalculateGalaxy);
        }
        
    </script>
</body>
</html>
