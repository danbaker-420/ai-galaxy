<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Legal Tech Galaxy (Responsive)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Base styles for the dark, space theme */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117; /* GitHub Dark Background */
            color: #ffffff;
            /* Ensure the body uses the full viewport height/width */
            height: 100vh;
            width: 100vw;
            overflow: hidden; 
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Tooltip Styling */
        #tooltip {
            position: fixed;
            background-color: #1f2937; /* Dark Gray background */
            color: #ffffff;
            border: 2px solid #e65100; /* Orange border */
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.7);
            z-index: 1000;
            max-width: 300px;
            font-size: 0.9rem;
            line-height: 1.4;
            opacity: 0;
            pointer-events: none; /* Allows clicks to pass through when hidden */
            transition: opacity 0.2s, transform 0.2s;
        }
        #tooltip h4 {
            font-weight: 700;
            color: #ffc107;
            margin-bottom: 0.5rem;
        }


        /* Container for the solar system - Now uses viewport units for responsiveness */
        #galaxy-system {
            position: relative;
            /* Use 90% of the viewport's smaller dimension (min) to ensure it fits landscape/portrait */
            width: 90vmin; 
            height: 90vmin;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        /* Define base size in VW for responsive scaling */
        /* All other sizes will be calculated as percentages of this VMAX unit */
        .vmax-unit {
            /* 100px for a 1000px container is 10vw, so 1vw is 10px. 
               We will use a base unit of 0.1vmin (1/1000th of the container size) */
            position: absolute; 
            width: 0; 
            height: 0; 
        }

        /* --- THE CORE (SUN) --- */
        .sun {
            /* REVERTED size: 150px. Now 15vmin for a 1000px system (15% of container) */
            width: 15vmin; 
            height: 15vmin; 
            border-radius: 50%;
            background: radial-gradient(circle, #ffc107 0%, #e65100 80%); 
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            /* Enhanced 3D appearance for the core */
            box-shadow: 0 0 10vmin rgba(255, 193, 7, 0.7), inset 0 0 4vmin rgba(255, 255, 255, 0.5); 
            font-weight: 700;
            color: #111827;
            position: absolute;
            z-index: 10;
            padding: 0.5vmin;
            cursor: default; /* Change cursor back since it's now hover text */
            transition: transform 0.3s ease, filter 0.2s ease;
        }
        .sun:hover {
            filter: brightness(1.2); /* Haptic effect: Makes it slightly brighter on hover */
        }
        .sun-label {
            line-height: 1.2;
            font-size: 1.8vmin; /* Responsive font size */
            white-space: nowrap;
        }
        .sun-icon {
            font-size: 3vmin; /* Responsive icon size */
            margin-bottom: 0.25vmin;
        }

        /* --- PLANET STYLING AND POSITIONING (Static) --- */
        .planet {
            position: absolute;
            transform: translate(-50%, -50%); 
            cursor: default; /* Change cursor back since it's now hover text */
            transition: transform 0.3s ease, filter 0.2s ease; /* Added filter transition for hover */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 5px;
            font-weight: 600;
            /* Enhanced Outer Shadow: Stronger drop shadow for lift */
            box-shadow: 0 1vmin 3vmin rgba(0, 0, 0, 0.6); 
            border: 0.2vmin solid rgba(255, 255, 255, 0.2);
            z-index: 15;
        }

        .planet-logo {
            width: 95%; 
            height: 95%; 
            border-radius: 50%; 
            position: relative;
            background-color: #d1d5db;
            display: flex;
            justify-content: center;
            align-items: center;
            /* Enhanced Inner Shadow: Soft white shadow for spherical detail */
            box-shadow: inset 0 0 1vmin rgba(0, 0, 0, 0.3), inset 0 0 1vmin rgba(255, 255, 255, 0.2); 
            overflow: hidden;
            color: #111827;
        }

        .planet-logo img {
            width: 90%; 
            height: 90%;
            object-fit: contain; 
            border-radius: 50%; 
            padding: 0.5vmin; /* Responsive padding */
        }

        .planet-name {
            position: absolute;
            bottom: -3vmin; /* Responsive position */
            font-size: 1.5vmin; /* Responsive font size */
            white-space: nowrap;
            color: #e5e7eb;
            background-color: rgba(0, 0, 0, 0.8); /* Darker background for contrast */
            padding: 0.4vmin 0.8vmin; /* Responsive padding */
            border-radius: 4px;
        }

        .planet:hover {
            transform: translate(-50%, -50%) scale(1.1);
            filter: brightness(1.2); /* Haptic effect: Makes it slightly brighter on hover */
            z-index: 20;
        }

        /* Planet Size and Logo Styles - Converted to VMIN */
        .size-lg { width: 20vmin; height: 20vmin; border-radius: 50%; } 
        .size-md { width: 16vmin; height: 16vmin; border-radius: 50%; } 
        .size-sm { width: 12vmin; height: 12vmin; border-radius: 50%; } 
        .size-xs { width: 8vmin; height: 8vmin; border-radius: 50%; } 

        /* Colors remain the same */
        .color-purple { background: linear-gradient(135deg, #7e22ce, #a855f7); }
        .color-red { background: linear-gradient(135deg, #dc2626, #f87171); }
        .color-green { background: linear-gradient(135deg, #059669, #34d399); }
        .color-orange { background: linear-gradient(135deg, #ea580c, #f97316); }
        .color-rainbow { background: linear-gradient(90deg, #ef4444, #f97316, #eab308, #22c55e, #3b82f6, #8b5cf6); }
        .color-blue { background: linear-gradient(135deg, #0284c7, #38bdf8); }
        .color-yellow { background: linear-gradient(135deg, #f59e0b, #facc15); }

        /* MOON STYLING AND POSITIONING (Relative to their planet) */
        .moon-path {
            position: absolute; 
            width: 1px;
            height: 1px;
            top: 50%;
            left: 50%;
        }

        .moon {
            position: absolute;
            transform: translate(-50%, -50%); 
            cursor: default; /* Change cursor back since it's now hover text */
            transition: transform 0.3s ease, filter 0.2s ease; /* Added filter transition for hover */
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            /* Enhanced Outer Shadow */
            box-shadow: 0 0.5vmin 1.5vmin rgba(0, 0, 0, 0.4); 
            border: 0.1vmin solid rgba(255, 255, 255, 0.2);
            font-weight: 500;
        }

        .moon-logo {
            /* Enhanced Inner Shadow for moons */
            box-shadow: inset 0 0 0.5vmin rgba(0, 0, 0, 0.3), inset 0 0 0.5vmin rgba(255, 255, 255, 0.2); 
        }

        .moon:hover {
            filter: brightness(1.2); /* Haptic effect on hover */
            transform: translate(-50%, -50%) scale(1.1);
        }

        .moon-name {
            position: absolute;
            bottom: -3vmin; /* Responsive position */
            font-size: 1.2vmin; /* Responsive font size */
            white-space: nowrap;
            color: #e5e7eb;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 0.2vmin 0.5vmin; /* Responsive padding */
            border-radius: 3px;
        }

        /* Utility to style the placeholder logos */
        .logo-placeholder {
            font-size: 2vmin; /* Responsive font size */
            font-weight: 700;
            color: #111827;
            line-height: 1;
        }

        /* Mobile Optimization: Ensure footer text doesn't overlap on tiny screens */
        .footer-note {
            font-size: 0.8rem;
            padding: 0.5rem;
        }
        @media (max-width: 600px) {
            .footer-note p {
                line-height: 1.3;
            }
        }
    </style>
</head>
<body>

<!-- Tooltip element added for hover text -->
<div id="tooltip"></div>

<!-- Main Galaxy Visualization Container -->
<div id="galaxy-system">
    
    <!-- Sun/Core -->
    <div class="sun" id="sun-core" data-system-name="Legal, Regulatory, & Compliance Core">
        <span class="sun-icon">⚖️</span>
        <div class="sun-label">Legal, Regulatory, & Compliance</div>
    </div>

    <script>
        // Start IIFE to contain variable scope and prevent global redeclaration errors
        (function() {
            // Updated galaxyData with usage descriptions
            const galaxyData = [
                {
                    name: "Harvey.ai", 
                    colorClass: "color-purple", 
                    sizeClass: "size-md", 
                    logo: `<img src="https://logo.clearbit.com/www.harvey.ai" onerror="this.src='https://placehold.co/100x100/7e22ce/ffffff?text=H';" alt="Harvey.ai Logo">`,
                    isImageLogo: true, 
                    usage: "Used for rapid **legal research, summarizing case law**, and drafting initial documents like memos and motions based on proprietary firm knowledge.",
                    moons: []
                },
                {
                    name: "Law360", 
                    colorClass: "color-red", 
                    sizeClass: "size-md", 
                    logo: "L360",
                    isImageLogo: false,
                    usage: "Used for **daily news aggregation**, staying current on regulatory changes, and tracking competitor litigation in specific jurisdictions.",
                    moons: []
                },
                {
                    name: "Luminance", 
                    colorClass: "color-green", 
                    sizeClass: "size-md", 
                    // UPDATED LOGO URL
                    logo: `<img src="https://logo.clearbit.com/www.luminance.com" onerror="this.src='https://placehold.co/100x100/059669/ffffff?text=L';" alt="Luminance Logo">`,
                    isImageLogo: true,
                    usage: "Used for **M&A due diligence**, quickly reviewing large volumes of contracts to identify and classify key clauses (e.g., change of control, indemnity).",
                    moons: []
                },
                {
                    name: "Rovo", 
                    colorClass: "color-orange", 
                    sizeClass: "size-md", 
                    logo: "R",
                    isImageLogo: false,
                    usage: "Used for **internal knowledge retrieval**, answering employee questions instantly by searching across internal documents (policies, playbooks, forms).",
                    moons: []
                },
                {
                    name: "Gemini 2.5 Pro", 
                    colorClass: "color-rainbow", 
                    sizeClass: "size-lg", 
                    // UPDATED LOGO URL
                    logo: `<img src="https://logo.clearbit.com/agentspace.google.com" onerror="this.src='https://placehold.co/100x100/9400d3/ffffff?text=G2.5';" alt="Gemini 2.5 Pro Logo">`,
                    isImageLogo: true,
                    usage: "The **advanced generative AI platform** powering custom workflows and complex reasoning across legal data sets, including complex contract drafting and risk scoring.",
                    moons: [
                        { name: "Gemini Gems", colorClass: "color-blue", sizeClass: "size-sm", logo: "GG", usage: "A specialized, secure version for **highly sensitive tasks** requiring maximum data isolation, such as privileged communication review." },
                        { name: "NotebookLM", colorClass: "color-yellow", sizeClass: "size-sm", logo: "NLM", usage: "Used for **deep document analysis** and synthesis, creating detailed reports and executive summaries from diverse sources (e.g., litigation transcripts, regulatory filings)." }
                    ]
                }
            ];

            const coreUsage = { 
                name: "Legal, Regulatory, & Compliance Core",
                usage: "The central function governing organizational risk, legal operations, and adherence to global regulations. It serves as the **core mission** and hub for all integrated legal technology."
            };


            const galaxySystem = document.getElementById('galaxy-system');
            const sun = document.querySelector('.sun');
            const tooltip = document.getElementById('tooltip');
            
            // Function to find data by name, including the core
            function findSystemData(name) {
                if (name === coreUsage.name) return coreUsage;
                
                let found = galaxyData.find(p => p.name === name);
                if (found) return found;

                for (const planet of galaxyData) {
                    if (planet.moons) {
                        found = planet.moons.find(m => m.name === name);
                        if (found) return found;
                    }
                }
                return { name: name, usage: 'Usage details are currently unavailable for this system.' };
            }
            
            /**
             * Shows the tooltip next to the hovered element.
             * @param {HTMLElement} element The planet, moon, or sun element being hovered.
             */
            function showTooltip(element) {
                const name = element.getAttribute('data-system-name');
                const data = findSystemData(name);
                
                if (!data || !data.usage) return hideTooltip();

                const rect = element.getBoundingClientRect();
                
                tooltip.innerHTML = `<h4>${data.name}</h4><p>${data.usage}</p>`;

                // Determine position: Place to the right if possible, otherwise to the left.
                let x = rect.right + 10;
                let y = rect.top + (rect.height / 2);
                
                // Adjust position if it goes off the right edge
                if (x + tooltip.offsetWidth > window.innerWidth) {
                    x = rect.left - tooltip.offsetWidth - 10; // Move to the left of the element
                    if (x < 0) x = 10; // Fallback for very small screens
                }
                
                // Adjust y position to center the tooltip vertically relative to the element
                y -= tooltip.offsetHeight / 2;
                
                // Prevent tooltip from going off the top/bottom of the screen
                if (y < 10) y = 10;
                if (y + tooltip.offsetHeight > window.innerHeight) {
                    y = window.innerHeight - tooltip.offsetHeight - 10;
                }
                
                tooltip.style.left = `${x}px`;
                tooltip.style.top = `${y}px`;
                tooltip.style.opacity = '1';
                tooltip.style.pointerEvents = 'auto';
            }

            /**
             * Hides the tooltip.
             */
            function hideTooltip() {
                tooltip.style.opacity = '0';
                tooltip.style.pointerEvents = 'none';
            }


            // Configuration for static radial map - now using relative units based on container size
            
            // Get the actual runtime size of the container (in pixels, which is needed for SVG coordinates)
            const size = galaxySystem.offsetWidth;
            const centerX = Math.round(size / 2); // ROUNDED
            const centerY = Math.round(size / 2); // ROUNDED
            
            // R (Radius): 40% of the container width/height (was 400px of 1000px)
            const R = size * 0.40; 
            
            // R_MOON (Moon distance): 20% of the container width/height (was 200px of 1000px)
            const R_MOON = size * 0.20; 

            const numPlanets = galaxyData.length;
            const angleStep = 360 / numPlanets;
            
            // Create SVG container for lines (spokes)
            const svgNS = "http://www.w3.org/2000/svg";
            const svg = document.createElementNS(svgNS, 'svg');
            svg.setAttribute('width', '100%');
            svg.setAttribute('height', '100%');
            svg.style.position = 'absolute';
            svg.style.top = '0';
            svg.style.left = '0';
            svg.style.zIndex = '5';
            // Insert the SVG element right after the sun (which is absolute z-10)
            galaxySystem.insertBefore(svg, sun.nextSibling);

            galaxyData.forEach((planetData, index) => {
                // Calculate angle (start at 90 degrees - straight up, then increment)
                const angleDeg = 90 + (index * angleStep);
                const angleRad = angleDeg * (Math.PI / 180);

                // Calculate (x, y) position on the circle (y is inverted in screen coords)
                const x = centerX + R * Math.cos(angleRad);
                const y = centerY - R * Math.sin(angleRad);
                
                // ROUNDED COORDINATES FOR ALIGNMENT
                const x_round = Math.round(x);
                const y_round = Math.round(y);


                // 1. Create the connecting line (Sun to Planet Spoke)
                const line = document.createElementNS(svgNS, 'line');
                line.setAttribute('x1', centerX);
                line.setAttribute('y1', centerY);
                line.setAttribute('x2', x_round); // ROUNDED
                line.setAttribute('y2', y_round); // ROUNDED
                line.setAttribute('stroke', 'rgba(255, 255, 255, 0.2)');
                line.setAttribute('stroke-width', '2');
                svg.appendChild(line);

                // 2. Create the planet element
                const planet = document.createElement('div');
                planet.className = `planet ${planetData.sizeClass}`;
                
                // Position the planet absolutely using calculated coordinates
                planet.style.top = `${y_round}px`; // ROUNDED
                planet.style.left = `${x_round}px`; // ROUNDED
                planet.setAttribute('data-system-name', planetData.name); /* Added data attribute */

                // 3. Create the planet's visual body (logo/color)
                const planetLogo = document.createElement('div');
                planetLogo.className = `planet-logo ${planetData.colorClass}`;
                
                // Conditional rendering for image logo vs. text placeholder
                if (planetData.isImageLogo) {
                    // Note: The logo tag no longer contains styling classes, those are now applied to the img element via CSS
                    planetLogo.innerHTML = planetData.logo;
                } else {
                    planetLogo.innerHTML = `<span class="logo-placeholder">${planetData.logo}</span>`;
                }
                
                // 4. Create the name tag
                const planetName = document.createElement('span');
                planetName.className = 'planet-name';
                planetName.textContent = planetData.name;
                
                planet.appendChild(planetLogo);
                planet.appendChild(planetName);

                // 5. Add moons and Moon Spoke lines
                if (planetData.moons.length > 0) {
                    const moonPath = document.createElement('div');
                    moonPath.className = 'moon-path';
                    
                    // Since the moon-path is just a 1px container at the planet center, it handles relative positioning
                    planet.appendChild(moonPath); 
                    
                    // Set the counter-clockwise rotation offset in degrees
                    const rotationOffsetDeg = -30;

                    planetData.moons.forEach((moonData, moonIndex) => {
                        // Calculate moon's fixed local angle (0 and 180 for 2 moons, plus the -30-degree offset)
                        const initialAngle = moonIndex * (360 / planetData.moons.length); 
                        const localAngleDeg = initialAngle + rotationOffsetDeg;
                        const localAngleRad = localAngleDeg * (Math.PI / 180);

                        // Calculate Moon's absolute center coordinates for SVG line endpoint
                        // We project R_MOON distance from the planet's absolute center (x, y)
                        const moon_x_abs = x_round + R_MOON * Math.cos(localAngleRad);
                        const moon_y_abs = y_round - R_MOON * Math.sin(localAngleRad);

                        // ROUNDED MOON ABSOLUTE COORDINATES
                        const moon_x_abs_round = Math.round(moon_x_abs);
                        const moon_y_abs_round = Math.round(moon_y_abs);

                        // Draw Moon Spoke (Planet center to Moon center)
                        const moon_line = document.createElementNS(svgNS, 'line');
                        moon_line.setAttribute('x1', x_round); // ROUNDED planet center
                        moon_line.setAttribute('y1', y_round); // ROUNDED planet center
                        moon_line.setAttribute('x2', moon_x_abs_round); // ROUNDED moon center
                        moon_line.setAttribute('y2', moon_y_abs_round); // ROUNDED moon center
                        moon_line.setAttribute('stroke', 'rgba(255, 255, 255, 0.4)'); 
                        moon_line.setAttribute('stroke-width', '1');
                        svg.appendChild(moon_line);

                        // Create the moon element (positioned relative to the moon-path container at planet center)
                        const moon = document.createElement('div');
                        moon.className = `moon ${moonData.sizeClass} ${moonData.colorClass}`;
                        moon.setAttribute('data-system-name', moonData.name); /* Added data attribute */

                        // Calculate moon's position relative to the planet's center point (50% of planet width)
                        const moon_x_rel = R_MOON * Math.cos(localAngleRad); 
                        const moon_y_rel = R_MOON * Math.sin(localAngleRad); 
                        
                        // Position the moon relative to the 1px moonPath container, which is at the planet's center.
                        // We round the relative coordinates too for perfect alignment with the planet element's internal rendering.
                        moon.style.left = `${Math.round(moon_x_rel)}px`;
                        moon.style.top = `${Math.round(-moon_y_rel)}px`; // Y-axis is inverted in screen coordinates

                        const moonLogo = document.createElement('div');
                        // Use inline style for 95% width/height to leave a small outline
                        moonLogo.style.width = '95%';
                        moonLogo.style.height = '95%';
                        moonLogo.className = 'rounded-full flex justify-center items-center bg-gray-100 moon-logo'; /* Added moon-logo class for inner shadow */
                        moonLogo.innerHTML = `<span class="text-xs font-bold text-gray-800">${moonData.logo}</span>`;
                        
                        const moonName = document.createElement('span');
                        moonName.className = 'moon-name';
                        moonName.textContent = moonData.name;

                        moon.appendChild(moonLogo);
                        moon.appendChild(moonName);
                        moonPath.appendChild(moon);
                    });
                }

                galaxySystem.appendChild(planet);
            });

            // --- HOVER INTERACTION LOGIC ---
            const interactiveElements = [sun, ...document.querySelectorAll('.planet'), ...document.querySelectorAll('.moon')];
            
            interactiveElements.forEach(item => {
                // Add usage data attributes for convenience
                const name = item.getAttribute('data-system-name');
                const data = findSystemData(name);
                if (data && data.usage) {
                    // Replace markdown bolding with simple HTML for the tooltip
                    const usageHtml = data.usage.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                    item.setAttribute('data-usage', usageHtml);
                }
                
                item.addEventListener('mouseover', function() {
                    const usageHtml = this.getAttribute('data-usage');
                    if (usageHtml) {
                        showTooltip(this);
                    }
                });
                item.addEventListener('mouseout', hideTooltip);
            });
            // --- END HOVER INTERACTION LOGIC ---

        })(); // End IIFE
    </script>
</div>

<!-- Simple footer note to explain the visualization -->
<div class="fixed bottom-0 left-0 right-0 text-center p-4 bg-gray-900 bg-opacity-80 text-gray-400 footer-note">
    <p>This AI Galaxy visualization maps the Legal Tech Ecosystem around the LRC Core. Hover to see names and click to explore a tool!</p>
    <p class="mt-1">Platforms with components (moons) indicate native AI applications.</p>
</div>

</body>
</html>

